/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package tic_tac_toe;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import ttt.james.server.TTTWebService;
import ttt.james.server.TTTWebService_Service;

/**
 *
 * @author Johnson
 */
public class GameOptions extends javax.swing.JFrame {
    private int playerID;
    private TTTWebService proxy; 
    private String playerName;
    private String openGames;
    private int selectedGame;

    public GameOptions() {
        initComponents();
        this.setTitle("Menu");
        this.proxy = new TTTWebService_Service().getTTTWebServicePort();
        gamesList.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {                                    
                JTable source = (JTable)evt.getSource();
                int row = source.rowAtPoint(evt.getPoint());
                selectedGame = Integer.parseInt(source.getModel().getValueAt(row, 0).toString());
            } 
        });
        newGameButton.addActionListener(new ActionListener(){
            public void actionPerformed(ActionEvent arg0) {
                String newGameID = proxy.newGame(playerID);
                if (newGameID.contains("ERROR")) {
                    serverInfo.setText(newGameID);
                } else {
                    int gid = Integer.parseInt(newGameID);
                    if (gid > 0) {
                        dispose();
                        GameWindow gameWindow = new GameWindow(gid, playerID, "X", playerName);
                        gameWindow.setVisible(true);
                        //setVisible(false);
                    }
                }
            }
        });
        
        joinButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent arg0) {
		if (selectedGame > 0){
                    String currentGameID = proxy.joinGame(playerID, selectedGame);
                    if (currentGameID.contains("ERROR")) {
                        JOptionPane.showMessageDialog(null, "Can't connect to Database!");
                    } else {
                        dispose();
                        GameWindow gameWindow = new GameWindow(selectedGame, playerID, "O", playerName);
                        gameWindow.setVisible(true);
                    }
                }
            }
	});
        
        leaderButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent arg0) {
		Leaderboard leaderboard = new Leaderboard();
                leaderboard.showLeaderboard();
                leaderboard.setVisible(true);
            }
	});
        
        scoreButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent arg0) {
		Scoreboard scoreboard = new Scoreboard();
                scoreboard.showscore(playerID, playerName);
                scoreboard.setVisible(true);
            }
	});
        
        refreshButton.addActionListener(new ActionListener () {
            public void actionPerformed(ActionEvent arg0) {
                DefaultTableModel model = (DefaultTableModel) gamesList.getModel();
                model.setRowCount(0);
                showOpenGames(playerID, playerName);
            }
        });
        
    }
    
    public void showOpenGames (int pid, String username) {
        this.playerID = pid;
        selectedGame = -1;
        this.playerName = username;
        
        openGames = proxy.showOpenGames();
        if (openGames.contains("ERROR")){
            serverInfo.setText("There are currently no Open Games!");
        } else {
            String[] columns = {"Game ID", "Player Name", "Timestamp"};
            String[] openGamesList = openGames.split("\\n");
            String[][] games = new String[openGamesList.length][];
            // prepare data for display
            for (int i = 0; i < openGamesList.length; i++) {
                games[i] = openGamesList[i].split(",");
            }
            DefaultTableModel dataSet = new DefaultTableModel(games, columns);
            gamesList.setModel(dataSet);
            gamesList.repaint();
        }
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        newGameButton = new javax.swing.JButton();
        joinButton = new javax.swing.JButton();
        leaderButton = new javax.swing.JButton();
        scoreButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        gamesList = new javax.swing.JTable();
        serverInfo = new javax.swing.JLabel();
        refreshButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(640, 480));

        newGameButton.setText("New Game");

        joinButton.setText("Join Game");

        leaderButton.setText("Leaderboard");

        scoreButton.setText("Scoreboard");

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setText("Game Options");

        gamesList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Game ID", "Player Name", "Timestamp"
            }
        ));
        jScrollPane1.setViewportView(gamesList);

        refreshButton.setText("Refresh");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(serverInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(51, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(34, 34, 34)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(leaderButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(joinButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(newGameButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(scoreButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(refreshButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(61, 61, 61)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(53, 53, 53)
                        .addComponent(newGameButton)
                        .addGap(51, 51, 51)
                        .addComponent(joinButton)
                        .addGap(46, 46, 46)
                        .addComponent(leaderButton)
                        .addGap(47, 47, 47)
                        .addComponent(scoreButton)))
                .addGap(18, 18, 18)
                .addComponent(serverInfo)
                .addGap(18, 18, 18)
                .addComponent(refreshButton)
                .addContainerGap(75, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable gamesList;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton joinButton;
    private javax.swing.JButton leaderButton;
    private javax.swing.JButton newGameButton;
    private javax.swing.JButton refreshButton;
    private javax.swing.JButton scoreButton;
    private javax.swing.JLabel serverInfo;
    // End of variables declaration//GEN-END:variables
}
